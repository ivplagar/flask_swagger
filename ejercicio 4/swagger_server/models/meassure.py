# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Meassure(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, fecha_muestreo: str=None, unidad: str=None, tipo: str=None, medicions: int=None):  # noqa: E501
        """Meassure - a model defined in Swagger

        :param code: The code of this Meassure.  # noqa: E501
        :type code: str
        :param fecha_muestreo: The fecha_muestreo of this Meassure.  # noqa: E501
        :type fecha_muestreo: str
        :param unidad: The unidad of this Meassure.  # noqa: E501
        :type unidad: str
        :param tipo: The tipo of this Meassure.  # noqa: E501
        :type tipo: str
        :param medicions: The medicions of this Meassure.  # noqa: E501
        :type medicions: int
        """
        self.swagger_types = {
            'code': str,
            'fecha_muestreo': str,
            'unidad': str,
            'tipo': str,
            'medicions': int
        }

        self.attribute_map = {
            'code': 'code',
            'fecha_muestreo': 'fechaMuestreo',
            'unidad': 'unidad',
            'tipo': 'tipo',
            'medicions': 'medicions'
        }

        self._code = code
        self._fecha_muestreo = fecha_muestreo
        self._unidad = unidad
        self._tipo = tipo
        self._medicions = medicions

    @classmethod
    def from_dict(cls, dikt) -> 'Meassure':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Meassure of this Meassure.  # noqa: E501
        :rtype: Meassure
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """Gets the code of this Meassure.


        :return: The code of this Meassure.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Meassure.


        :param code: The code of this Meassure.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def fecha_muestreo(self) -> str:
        """Gets the fecha_muestreo of this Meassure.


        :return: The fecha_muestreo of this Meassure.
        :rtype: str
        """
        return self._fecha_muestreo

    @fecha_muestreo.setter
    def fecha_muestreo(self, fecha_muestreo: str):
        """Sets the fecha_muestreo of this Meassure.


        :param fecha_muestreo: The fecha_muestreo of this Meassure.
        :type fecha_muestreo: str
        """
        if fecha_muestreo is None:
            raise ValueError("Invalid value for `fecha_muestreo`, must not be `None`")  # noqa: E501

        self._fecha_muestreo = fecha_muestreo

    @property
    def unidad(self) -> str:
        """Gets the unidad of this Meassure.


        :return: The unidad of this Meassure.
        :rtype: str
        """
        return self._unidad

    @unidad.setter
    def unidad(self, unidad: str):
        """Sets the unidad of this Meassure.


        :param unidad: The unidad of this Meassure.
        :type unidad: str
        """
        if unidad is None:
            raise ValueError("Invalid value for `unidad`, must not be `None`")  # noqa: E501

        self._unidad = unidad

    @property
    def tipo(self) -> str:
        """Gets the tipo of this Meassure.


        :return: The tipo of this Meassure.
        :rtype: str
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo: str):
        """Sets the tipo of this Meassure.


        :param tipo: The tipo of this Meassure.
        :type tipo: str
        """
        if tipo is None:
            raise ValueError("Invalid value for `tipo`, must not be `None`")  # noqa: E501

        self._tipo = tipo

    @property
    def medicions(self) -> int:
        """Gets the medicions of this Meassure.


        :return: The medicions of this Meassure.
        :rtype: int
        """
        return self._medicions

    @medicions.setter
    def medicions(self, medicions: int):
        """Sets the medicions of this Meassure.


        :param medicions: The medicions of this Meassure.
        :type medicions: int
        """

        self._medicions = medicions
